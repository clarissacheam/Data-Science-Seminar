# -*- coding: utf-8 -*-
"""Checkpoint-4-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z_3WTKZJ-D0KGqQJsLIWsKU82McKSI_I

# **CHECKPOINT 4: GRAPH ANALYTICS**
### ***DATA PIRATES:COLAB NOTEBOOK 1***
> Kavya Jaganathan, Clarissa Cheam and Ayushi Mishra

# **Question 1: Studying allegation distributions within Units**

**Setup**
> Upload provided graphframe.jar file before running the following cells
"""

# install java
!apt-get install openjdk-8-jdk-headless -qq > /dev/null

# install spark (change the version number if needed)
!wget -q https://archive.apache.org/dist/spark/spark-3.2.0/spark-3.2.0-bin-hadoop3.2.tgz

# unzip the spark file to the current folder
!tar xf spark-3.2.0-bin-hadoop3.2.tgz

# set your spark folder to your system path environment. 
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.0-bin-hadoop3.2"

# install findspark using pip
!pip install -q findspark

# install pyspark
!pip3 install pyspark==3.2.0

# install graphframes
!pip3 install graphframes

!cp -v /content/graphframes-0.8.2-spark3.2-s_2.12.jar $SPARK_HOME/jars/

#import the packages
from pyspark import *
from pyspark.sql import *
from graphframes import *
import findspark
import pandas as pd

findspark.init()

# Start a Spark session
spark = SparkSession.builder.master("local[*]").getOrCreate()

"""**Connecting to CPDB Database**"""

import psycopg2

conn = psycopg2.connect(
    host="codd04.research.northwestern.edu",
    port = "5433",
    database="postgres",
    user="cpdbstudent",
    password="DataSci4AI")

cursor = conn.cursor()

#nodes_officer has id, name, allegation count and percentile
nodes_officer = "SELECT  id, first_name || ' ' || last_name officer_name, allegation_count, trr_count FROM data_officer;"

#unit-edges
edges_unit = "select o1.id src,o2.id dst ,o1.last_unit_id relationship  from data_officer o1, data_officer o2 where o1.last_unit_id=o2.last_unit_id AND o1.id<o2.id order by relationship;"

"""**Dataframe for officer_nodes**"""

cursor.execute(nodes_officer)
nodes_o = cursor.fetchall()
print("shape is: " + str(len(nodes_o))) # 17465

df_nodes_o = pd.DataFrame(nodes_o)
colnames = [desc[0] for desc in cursor.description]
df_nodes_o.columns = colnames

print(df_nodes_o.shape)

"""**Dataframe for unit edges**"""

cursor.execute(edges_unit)
edges_units = cursor.fetchall()
print("shape is: " + str(len(edges_units))) # 17465

df_edges_unit = pd.DataFrame(edges_units)
colnames = [desc[0] for desc in cursor.description]
df_edges_unit.columns = colnames

print(df_edges_unit.shape)

"""**Unit graph creation**"""

edges_ = spark.createDataFrame(df_edges_unit)

nodes_ = spark.createDataFrame(df_nodes_o)

cpdb2 = GraphFrame(nodes_,edges_)

cpdb2.vertices.show()

cpdb2.edges.show()

#code for showing allegation count per unit to choose unit to investigate distribution
cursor.execute("select sum(allegation_count) as count_allegation_per_unit , last_unit_id from data_officer group by last_unit_id order by count_allegation_per_unit desc")
result = cursor.fetchall()
for x in result:
  print(x)

g = cpdb2.filterEdges("relationship = 9").dropIsolatedVertices()

g.vertices.sort(['allegation_count'],ascending=False).show(100)

dataframe = g.vertices.toPandas()

dataframe.head()

dataframe = dataframe.sort_values(by=['allegation_count'],ascending=False)

list1 = dataframe['id']
officers = []
for o in list1:
  officers.append(str(o))

allegation_count = dataframe['allegation_count']

trr_count = dataframe['trr_count']

import matplotlib.pyplot as plt

# plotting the allegation points 
plt.plot(officers, allegation_count, label = "Allegation counts")

# plotting the trr points 
plt.plot(officers, trr_count, label = "TRR counts")
plt.xlabel('officers')
# Set the y axis label of the current axis.
plt.ylabel('counts')
plt.title('Distribution of allegations and TRRs in unit 9')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()

"""**Analysis of unassigned officers**"""

notiso =  [row.id for row in cpdb2.dropIsolatedVertices().vertices.select("id").collect()]
iso = cpdb2.vertices.filter(cpdb2.vertices.id.isin(notiso) == False)

allegation_count=iso.select("allegation_count").collect()

allegation_unassigned = [row.allegation_count for row in allegation_count]

trr_count =iso.select("trr_count").collect()

trr_unassigned = [row.trr_count for row in trr_count]

officer_ids = iso.select("id").collect()

officer_unassigned = [row.id for row in officer_ids]

officers = []
for o in officer_unassigned:
  officers.append(str(o))

import matplotlib.pyplot as plt

# plotting the allegation points 
plt.plot(officers, allegation_unassigned, label = "Allegation counts")

# plotting the trr points 
plt.plot(officers, trr_unassigned, label = "TRR counts")
plt.xlabel('officers')
# Set the y axis label of the current axis.
plt.ylabel('counts')
plt.title('Distribution of allegations and TRRs for unassigned officers')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()

g2 = cpdb2.filterEdges("relationship = 171").dropIsolatedVertices()
g2.vertices.sort(['allegation_count'],ascending=False).show(100)

dataframe2 = g2.vertices.toPandas()

dataframe2 = dataframe2.sort_values(by=['allegation_count'],ascending=False)

list1 = dataframe2['id']
officers = []
for o in list1:
  officers.append(str(o))

allegation_count = dataframe2['allegation_count']

trr_count = dataframe2['trr_count']

import matplotlib.pyplot as plt

# plotting the allegation points 
plt.plot(officers[0:], allegation_count[0:], label = "Allegation counts")

# plotting the trr points 
plt.plot(officers[0:], trr_count[0:], label = "TRR counts")
plt.xlabel('officers')
# Set the y axis label of the current axis.
plt.ylabel('counts')
plt.title('Distribution of allegations and TRRs in unit 171 ')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()

#some calculations for insight

#number of officers in unit 9 according to the database
u9 = 895
#number of officers in the CPD according to the database
uc = 35545
#unit 9 percentage
print("Percentage of officers belonging to unit 9:" + str((u9/uc)*100))
#allegation counts of unit 9 according to the database
u9 = 10079
#allegation counts of CPD according to the database
uc = 247161
print("Percentage of allegations by unit 9:" + str((u9/uc)*100))

"""## **END OF QUESTION 1 CODE IN COLAB 1 NOTEBOOK**
> Refer colab notebook 2 for Question 2


"""