# -*- coding: utf-8 -*-
"""Checkpoint4-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bmj5cB9g4XD7ODoIW4LtUg2vycsWBl8a

# **CHECKPOINT 4: GRAPH ANALYTICS**
### ***DATA PIRATES: COLAB NOTEBOOK 2***

> Kavya Jaganathan, Clarissa Cheam and Ayushi Mishra

# **Question 2: Finding ring leaders of coaccusals**

**Seting up the colab and packages**
"""

from google.colab import drive
drive.mount('/content/drive')

# install java
!apt-get install openjdk-8-jdk-headless -qq > /dev/null

# install spark (change the version number if needed)
!wget -q https://archive.apache.org/dist/spark/spark-3.2.0/spark-3.2.0-bin-hadoop3.2.tgz

# unzip the spark file to the current folder
!tar xf spark-3.2.0-bin-hadoop3.2.tgz

# set your spark folder to your system path environment. 
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.0-bin-hadoop3.2"

# install findspark using pip
!pip install -q findspark

# install pyspark
!pip3 install pyspark==3.2.0

# install graphframes
!pip3 install graphframes

!cp -v /content/graphframes-0.8.2-spark3.2-s_2.12.jar $SPARK_HOME/jars/

#import the packages
from pyspark import *
from pyspark.sql import *
from graphframes import *
import findspark
import pandas as pd

findspark.init()

# Start a Spark session
spark = SparkSession.builder.master("local[*]").getOrCreate()

"""**Connecting to CPDB Database and storing the required data**"""

import psycopg2

conn = psycopg2.connect(
    host="codd04.research.northwestern.edu",
    port = "5433",
    database="postgres",
    user="cpdbstudent",
    password="DataSci4AI")

cursor = conn.cursor()

#Nodes: Saving the officer details and allegation counts from data_officer table as per required format 
nodes_officer = "SELECT  id, first_name || ' ' || last_name officer_name, allegation_count, trr_count FROM data_officer;"

#Edges: Saving the coaccusal count between officers data from data_officerallegation table as per required format 
edges_coaccusal = "SELECT da1.officer_id src, da2.officer_id dst, COUNT(DISTINCT da1.allegation_id) relationship FROM data_officerallegation da1 JOIN data_officerallegation da2 ON da1.allegation_id = da2.allegation_id AND da1.officer_id < da2.officer_id GROUP BY da1.officer_id, da2.officer_id ORDER BY count(*) DESC;"

"""**Creating dataframe for officers that will be set as nodes**

"""

cursor.execute(nodes_officer)
nodes_o = cursor.fetchall()
print("shape is: " + str(len(nodes_o))) # 17465

df_nodes_o = pd.DataFrame(nodes_o)
colnames = [desc[0] for desc in cursor.description]
df_nodes_o.columns = colnames

print(df_nodes_o.shape)

"""**Creating dataframe for coaccusals that will be set as edges**"""

cursor.execute(edges_coaccusal)
coaccusal_edges_result = cursor.fetchall()
print("shape is: " + str(len(coaccusal_edges_result))) # 17465

df_coaccusal = pd.DataFrame(coaccusal_edges_result)
colnames = [desc[0] for desc in cursor.description]
df_coaccusal.columns = colnames

print(df_coaccusal.shape)

"""**Creating GraphFrame with vertices, edges and nodes**"""

edges_ = spark.createDataFrame(df_coaccusal)
nodes = spark.createDataFrame(df_nodes_o)
from graphframes import GraphFrame
cpdb = GraphFrame(nodes, edges_)
cpdb.vertices.show()
cpdb.edges.show()
cpdb.vertices.sort(['id'],ascending=True).show()
cpdb.edges.sort(['relationship'],ascending=False).show()

"""**Implementing page rank algorithm to identify the most connected officers i.e. ring leaders**"""

df = cpdb.edges.toPandas()
df.head()
df[df['dst'].isin([32442, 32440])]

#Implementing page rank function
pr_cpdb = cpdb.pageRank(resetProbability=0.15, tol=0.01)
#look at the pagerank score for every vertex
pr_cpdb.vertices.orderBy('pagerank', ascending=False).show(100)

"""**Identifying the ring leaders**"""

#Converting graph frame to data frame for further operations
dataframe = pr_cpdb.vertices.toPandas()
dataframe.head()

#Ring leaders having pagerank greater than 60
dataframe[dataframe.pagerank>60]

"""**Implementing motif finding and plotting graphs to see all the connections to the chosen officer**"""

#Motif finding for the highest page rank scoring officer John Zinchuk with ID 32442 
paths = pr_cpdb.find("(a)-[e]->(b)").filter("b.id =32442")
e2 = paths.select("e.src", "e.dst", "e.relationship")
e2.show()

#Creating a plot graph function by using NetworkX for visualizing the graph
import networkx as nx

def plot_graph(gx):
    g = nx.DiGraph(directed = True)
    
    g = nx.from_pandas_edgelist(gx.edges.toPandas(),'src','dst')
    g.add_nodes_from(gx.vertices.toPandas()['id'])

    nx.draw(g, with_labels=True, arrows = True, node_color='pink')

#Creating graph frame for Officer John Zinchuk
g2 = GraphFrame(pr_cpdb.vertices, e2)
#Dropping isolated vertices
final_g= g2.dropIsolatedVertices()
#Plotting to see all connections to Officer John Zinchuk
plot_graph(final_g)

#Motif finding for a mid range page rank scoring officer Adam Wazny with ID 32412
paths2 = pr_cpdb.find("(a)-[e]->(b)").filter("b.id =32412")
e3 = paths2.select("e.src", "e.dst", "e.relationship")
e3.show()

#Creating graph frame for Officer Adam Wazny
g4 = GraphFrame(pr_cpdb.vertices, e3)
#Dropping isolated vertices
final_g2= g4.dropIsolatedVertices()
#Plotting to see all connections to Officer Adam Wazny
plot_graph(final_g2)

"""### **END OF QUESTION 2 CODE IN COLAB 2 NOTEBOOK**"""